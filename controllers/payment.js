const paymentRouter = require('express').Router()
const Payment = require('../models/payment')
const PaymentResult = require('../models/paymentResult')
const LiqPay = require('../utils/liqpay')

const liqpay = new LiqPay(process.env.LIQPAY_PUBLIC_KEY, process.env.LIQPAY_PRIVATE_KEY)

paymentRouter.post('/', async (request, response, next) => {
	try {
		// save new pending payment
		const payment = new Payment({ ...request.body })
		await payment.save()

		// payment params for liqpay from the saved payment data
		const paymentData = {
			'public_key': payment.public_key,
			'version': payment.version,
			'action': payment.action,
			'amount': payment.amount,
			'currency': payment.currency,
			'description': payment.description,
			'order_id': payment.id, // generated by mongo after saving payment
			'paytypes': payment.paytypes,
			'card': payment.card,
			'card_exp_month': payment.card_exp_month,
			'card_exp_year': payment.card_exp_year,
			'card_cvv': payment.card_cvv
		}

		// process payment results
		const processPaymentResult = async data => {

			if (data.status === 'success') {
				const paymentResult = new PaymentResult({ ...data, payment: payment.id })
				await paymentResult.save()

				// update earlier saved payment status and result field
				const successfulPayment = await Payment.findByIdAndUpdate(
					payment.id,
					{ isSuccessful: true, result: paymentResult.id },
					{ new: true }
				)

				return response
					.status(200)
					.send({
						successfulPayment
					})

			} else {
				return response.status(400).json({
					error:`Під час обробки платежу сталася помилка: ${data.err_description}`,
					data
				})
			}
		}

		// handle payment error
		const paymentError = (error, response) => {
			return response.status(400).json({
				error,
				response
			})
		}

		// send payment
		liqpay.api('request', paymentData, processPaymentResult, paymentError)

	} catch (exeption) {
		next (exeption)
	}
})

module.exports = paymentRouter
