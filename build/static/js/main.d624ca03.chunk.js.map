{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","components/LoginForm.js","components/Togglable.js","components/NoteForm.js","services/notes.js","services/login.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","Form","onSubmit","Group","Label","Control","id","type","name","value","onChange","Button","variant","Togglable","React","forwardRef","props","ref","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","buttonLabel","children","NoteForm","handleChange","token","axios","get","then","response","data","newObject","a","async","config","headers","Authorization","post","put","newToken","credentials","App","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","setUsername","setPassword","user","setUser","loginVisible","setLoginVisible","noteFormRef","createRef","useEffect","noteService","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","handleNoteChange","event","target","notesToShow","filter","addNote","preventDefault","noteObject","date","Date","toISOString","length","returnedNote","concat","toggleImportanceOf","find","n","changedNote","map","catch","error","setTimeout","handleLogin","loginService","setItem","stringify","loginForm","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d624ca03.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n\tconst label = note.important\r\n\t\t? 'make not important' : 'make important'\r\n\r\n\treturn (\r\n\t\t<li className='note'>\r\n\t\t\t{note.content}\r\n\t\t\t<button onClick={toggleImportance}>{label}</button>\r\n\t\t</li>\r\n\t)\r\n}\r\n\r\nexport default Note\r\n","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n\tif (message === null) {\r\n\t\treturn null\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"error\">\r\n\t\t\t{message}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\n\r\nconst Footer = () => {\r\n\tconst footerStyle = {\r\n\t\tcolor: 'green',\r\n\t\tfontStyle: 'italic',\r\n\t\tfontSize: 16\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div style={footerStyle}>\r\n\t\t\t<br />\r\n\t\t\t<em>Note app, Department of Computer Science, University of Helsinki 2019</em>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Form, Button } from 'react-bootstrap'\r\n\r\nconst LoginForm = ({\r\n\thandleSubmit,\r\n\thandleUsernameChange,\r\n\thandlePasswordChange,\r\n\tusername,\r\n\tpassword\r\n}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>Login</h2>\r\n\r\n\t\t\t<Form onSubmit={handleSubmit}>\r\n\t\t\t\t<Form.Group>\r\n\t\t\t\t\t<Form.Label>\r\n            username:\r\n\t\t\t\t\t</Form.Label>\r\n\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\tid=\"username\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tname=\"username\"\r\n\t\t\t\t\t\tvalue={username}\r\n\t\t\t\t\t\tonChange={handleUsernameChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Form.Label>\r\n            password\r\n\t\t\t\t\t</Form.Label>\r\n\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\tid=\"password\"\r\n\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\tvalue={password}\r\n\t\t\t\t\t\tonChange={handlePasswordChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\r\n            login\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Form.Group>\r\n\t\t\t</Form>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nLoginForm.propTypes = {\r\n\thandleSubmit: PropTypes.func.isRequired,\r\n\thandleUsernameChange: PropTypes.func.isRequired,\r\n\thandlePasswordChange: PropTypes.func.isRequired,\r\n\tusername: PropTypes.string.isRequired,\r\n\tpassword: PropTypes.string.isRequired\r\n}\r\n\r\nexport default LoginForm\r\n","import React, { useState, useImperativeHandle } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Togglable = React.forwardRef((props, ref) => { // eslint-disable-line react/display-name\r\n\tconst [visible, setVisible] = useState(false)\r\n\r\n\tconst hideWhenVisible = { display: visible ? 'none' : '' }\r\n\tconst showWhenVisible = { display: visible ? '' : 'none' }\r\n\r\n\tconst toggleVisibility = () => {\r\n\t\tsetVisible(!visible)\r\n\t}\r\n\r\n\tuseImperativeHandle(ref, () => {\r\n\t\treturn {\r\n\t\t\ttoggleVisibility\r\n\t\t}\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div style={hideWhenVisible}>\r\n\t\t\t\t<button onClick={toggleVisibility}>{props.buttonLabel}</button>\r\n\t\t\t</div>\r\n\t\t\t<div style={showWhenVisible} className=\"togglableContent\">\r\n\t\t\t\t{props.children}\r\n\t\t\t\t<button onClick={toggleVisibility}>cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n})\r\n\r\nTogglable.propTypes = {\r\n\tbuttonLabel: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Togglable\r\n","import React from 'react'\r\n\r\nconst NoteForm = ({ onSubmit, handleChange, value }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>Create a new note</h2>\r\n\t\t\t<form onSubmit={onSubmit}>\r\n\t\t\t\t<input\r\n\t\t\t\t\tid=\"newnote\"\r\n\t\t\t\t\tvalue={value}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<button type=\"submit\">save</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default NoteForm\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nlet token = null\r\n\r\nconst setToken = newToken => {\r\n\ttoken = `bearer ${newToken}`\r\n}\r\n\r\nconst getAll = () => {\r\n\tconst request = axios.get(baseUrl)\r\n\treturn request.then(response => response.data)\r\n\t/*\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then(response => response.data.concat(nonExisting)) */\r\n}\r\n\r\nconst create = async newObject => {\r\n\tconst config = {\r\n\t\theaders: { Authorization: token }\r\n\t}\r\n\tconst response = await axios.post(baseUrl, newObject, config)\r\n\t// return request.then(response => response.data)\r\n\treturn response.data\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n\tconst request = axios.put(`${baseUrl}/${id}`, newObject)\r\n\treturn request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, setToken }\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async credentials => {\r\n\tconst response = await axios.post(baseUrl, credentials)\r\n\treturn response.data\r\n}\r\n\r\nexport default { login }\r\n","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport Notification from './components/Notification'\r\nimport Footer from './components/Footer'\r\nimport LoginForm from './components/LoginForm'\r\nimport './index.css'\r\nimport Togglable from './components/Togglable'\r\nimport NoteForm from './components/NoteForm'\r\nimport noteService from './services/notes'\r\nimport loginService from './services/login'\r\n\r\nconst App = () => {\r\n\tconst [notes, setNotes] = useState([])\r\n\tconst [newNote, setNewNote] = useState('default note text')\r\n\tconst [showAll, setShowAll] = useState(true)\r\n\tconst [errorMessage, setErrorMessage] = useState(null)\r\n\tconst [username, setUsername] = useState('')\r\n\tconst [password, setPassword] = useState('')\r\n\tconst [user, setUser] = useState(null)\r\n\tconst [loginVisible, setLoginVisible] = useState(false)\r\n\r\n\tconst noteFormRef = React.createRef()\r\n\r\n\tuseEffect(() => {\r\n\t\tnoteService\r\n\t\t\t.getAll()\r\n\t\t\t.then(initialNotes => {\r\n\t\t\t\tsetNotes(initialNotes)\r\n\t\t\t})\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\tconst loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\r\n\t\tif (loggedUserJSON) {\r\n\t\t\tconst user = JSON.parse(loggedUserJSON)\r\n\t\t\tsetUser(user)\r\n\t\t\tnoteService.setToken(user.token)\r\n\t\t}\r\n\t}, [])\r\n\r\n\tconst handleNoteChange = event => {\r\n\t\tsetNewNote(event.target.value)\r\n\t}\r\n\r\n\tconst notesToShow = showAll\r\n\t\t? notes\r\n\t\t: notes.filter(note => note.important === true)\r\n\r\n\tconst rows = () => notesToShow.map(note =>\r\n\t\t<Note\r\n\t\t\tkey={note.id}\r\n\t\t\tnote={note}\r\n\t\t\ttoggleImportance={() => toggleImportanceOf(note.id)}\r\n\t\t/>\r\n\t)\r\n\r\n\tconst addNote = event => {\r\n\t\tevent.preventDefault()\r\n\t\t// noteForm.current.toggleVisibility()\r\n\t\tconst noteObject = {\r\n\t\t\tcontent: newNote,\r\n\t\t\tdate: new Date().toISOString(),\r\n\t\t\t// important: Math.random() > 0.5,\r\n\t\t\timportant: false,\r\n\t\t\tid: notes.length + 1\r\n\t\t}\r\n\r\n\t\tnoteService\r\n\t\t\t.create(noteObject)\r\n\t\t\t.then(returnedNote => {\r\n\t\t\t\tsetNotes(notes.concat(returnedNote))\r\n\t\t\t\tsetNewNote('')\r\n\t\t\t})\r\n\t}\r\n\r\n\tconst toggleImportanceOf = id => {\r\n\t\tconst note = notes.find(n => n.id === id)\r\n\t\tconst changedNote = { ...note, important: !note.important }\r\n\r\n\t\tnoteService\r\n\t\t\t.update(id, changedNote)\r\n\t\t\t.then(returnedNote => {\r\n\t\t\t\tsetNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tsetErrorMessage(\r\n\t\t\t\t\t// `Note '${note.content}' was already removed from server` //??\r\n\t\t\t\t\t`An error occured while deleting note ${error.message}`\r\n\t\t\t\t)\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tsetErrorMessage(null)\r\n\t\t\t\t}, 5000)\r\n\t\t\t\tsetNotes(notes.filter(n => n.id !== id))\r\n\t\t\t})\r\n\t}\r\n\r\n\tconst handleLogin = async (event) => {\r\n\t\tevent.preventDefault()\r\n\t\ttry {\r\n\t\t\tconst user = await loginService.login({\r\n\t\t\t\tusername, password\r\n\t\t\t})\r\n\r\n\t\t\twindow.localStorage.setItem(\r\n\t\t\t\t'loggedNoteappUser', JSON.stringify(user)\r\n\t\t\t)\r\n\r\n\t\t\tnoteService.setToken(user.token)\r\n\t\t\tsetUser(user)\r\n\t\t\tsetUsername('')\r\n\t\t\tsetPassword('')\r\n\t\t} catch (exception) {\r\n\t\t\tsetErrorMessage('Wrong credentials')\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tsetErrorMessage(null)\r\n\t\t\t}, 5000)\r\n\t\t}\r\n\t}\r\n\r\n\tconst loginForm = () => {\r\n\t\tconst hideWhenVisible = { display: loginVisible ? 'none' : '' }\r\n\t\tconst showWhenVisible = { display: loginVisible ? '' : 'none' }\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div style={hideWhenVisible}>\r\n\t\t\t\t\t<button onClick={() => setLoginVisible(true)}>log in</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div style={showWhenVisible}>\r\n\t\t\t\t\t<LoginForm\r\n\t\t\t\t\t\tusername={username}\r\n\t\t\t\t\t\tpassword={password}\r\n\t\t\t\t\t\thandleUsernameChange={({ target }) => setUsername(target.value)}\r\n\t\t\t\t\t\thandlePasswordChange={({ target }) => setPassword(target.value)}\r\n\t\t\t\t\t\thandleSubmit={handleLogin}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button onClick={() => setLoginVisible(false)}>cancel</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tconst noteForm = () => (\r\n\t\t<Togglable buttonLabel=\"new note\" ref={noteFormRef}>\r\n\t\t\t<NoteForm\r\n\t\t\t\tonSubmit={addNote}\r\n\t\t\t\tvalue={newNote}\r\n\t\t\t\thandleChange={handleNoteChange}\r\n\t\t\t/>\r\n\t\t</Togglable>\r\n\t)\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>Notes</h1>\r\n\t\t\t<Notification message={errorMessage} />\r\n\r\n\t\t\t<h2>Login</h2>\r\n\r\n\t\t\t{user === null ?\r\n\t\t\t\tloginForm() :\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>{user.name} logged in</p>\r\n\t\t\t\t\t{noteForm()}\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<ul>\r\n\t\t\t\t{rows()}\r\n\t\t\t</ul>\r\n\t\t\t<Footer />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n\t<App />, document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}